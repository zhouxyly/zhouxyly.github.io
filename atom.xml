<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fluoxetine</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhouxyly.github.io/"/>
  <updated>2021-01-29T14:17:37.071Z</updated>
  <id>https://zhouxyly.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于学习线索二叉树的种种问题分析</title>
    <link href="https://zhouxyly.github.io/2021/01/29/%E5%85%B3%E4%BA%8E%E5%AD%A6%E4%B9%A0%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%A7%8D%E7%A7%8D%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
    <id>https://zhouxyly.github.io/2021/01/29/%E5%85%B3%E4%BA%8E%E5%AD%A6%E4%B9%A0%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%A7%8D%E7%A7%8D%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/</id>
    <published>2021-01-29T08:55:34.000Z</published>
    <updated>2021-01-29T14:17:37.071Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于学习线索二叉树寻找前驱-后继的种种问题分析"><a href="#关于学习线索二叉树寻找前驱-后继的种种问题分析" class="headerlink" title="关于学习线索二叉树寻找前驱/后继的种种问题分析"></a>关于学习线索二叉树寻找前驱/后继的种种问题分析</h1><hr><p>在复习数据结构的过程中，我发现线索二叉树的寻找前驱后继的问题十分繁琐，特此在这里总结一下学习中的收获与感悟。</p><ol><li><p>中序</p><ul><li><p>中序遍历后继结点</p></li><li><p>中序遍历前驱结点</p></li></ul></li><li><p>先序</p><ul><li>先序遍历后继结点</li><li>先序遍历前驱结点</li></ul></li><li><p>后序</p><ul><li>后序遍历后继结点</li><li>后序遍历前驱结点</li></ul></li></ol><a id="more"></a><blockquote><p>由于线索二叉树有设置ltag和rtag的属性，所以本文只讨论ltag和rtag等于零的情况</p></blockquote><h2 id="一、中序遍历"><a href="#一、中序遍历" class="headerlink" title="一、中序遍历"></a>一、中序遍历</h2><h4 id="1、中序遍历后继结点"><a href="#1、中序遍历后继结点" class="headerlink" title="1、中序遍历后继结点"></a>1、中序遍历后继结点</h4><p>在中序遍历中寻找某个结点*p 的后继结点next</p><p>因为此时结点p一定有右孩子结点，所以接着往下找。由于中序遍历是左中右的顺序，所以要想找这个p结点的后继，一定是p结点右孩子的左孩子结点，所以以此类推，一直寻找到结点p右孩子子树中最左下角的结点，就是结点p的后继结点。</p><blockquote><p>实现代码如下    </p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找到以p为根的子树中，第一个被中序遍历的结点</span></span><br><span class="line"><span class="function">ThreadNode *<span class="title">Firstnode</span><span class="params">(ThreadNode *p)</span></span>&#123;</span><br><span class="line">    <span class="comment">//循环找到最左下方结点（不一定是叶子结点）</span></span><br><span class="line">    <span class="keyword">while</span>(p-&gt;ltag==<span class="number">0</span>) p=p-&gt;lchild;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在中序线索二叉树中找到结点p的后继结点</span></span><br><span class="line"><span class="function">ThreadNode *<span class="title">Nextnode</span><span class="params">(ThreadNode *p)</span></span>&#123;</span><br><span class="line">    <span class="comment">//右子树中最左下结点</span></span><br><span class="line">    <span class="keyword">if</span>(p-&gt;rtag==<span class="number">0</span>) <span class="keyword">return</span> Firstnode(p-&gt;rchild);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> p-&gt;rchild; <span class="comment">//rtag==1 直接返回后继线索</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对中序线索二叉树进行中序遍历（利用线索实现的非递归算法）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Inorder</span><span class="params">(ThreadNode *T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(ThreadNode *p=FirstNode(T); p!=<span class="literal">NULL</span>; p=Nextnode(p))</span><br><span class="line">        visit(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、中序遍历前驱结点"><a href="#2、中序遍历前驱结点" class="headerlink" title="2、中序遍历前驱结点"></a>2、中序遍历前驱结点</h4><p>在中序遍历中寻找某个结点*p的前驱结点pre</p><p>因为此时结点p一定有左孩子结点，所以接着往下找。由于中序遍历是左中右的顺序，所以要想找这个p结点的后继，一定是p结点左孩子的右孩子结点，所以以此类推，一直寻找到结点p左孩子子树中最右下角的结点，就是结点p的前驱结点。</p><blockquote><p>实现代码如下</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找到以p为根的子树中，最后一个被中序遍历的结点</span></span><br><span class="line"><span class="function">ThreadNode *<span class="title">Lastnode</span><span class="params">(ThreadNode *p)</span></span>&#123;</span><br><span class="line">    <span class="comment">//循环找到最右下方结点（不一定是叶子结点）</span></span><br><span class="line">    <span class="keyword">while</span>(p-&gt;rtag==<span class="number">0</span>) p=p-&gt;rchild;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在中序线索二叉树中找到结点p的前驱结点</span></span><br><span class="line"><span class="function">ThreadNode *<span class="title">Prenode</span><span class="params">(ThreadNode *p)</span></span>&#123;</span><br><span class="line">    <span class="comment">//右子树中最右下结点</span></span><br><span class="line">    <span class="keyword">if</span>(p-&gt;ltag==<span class="number">0</span>) <span class="keyword">return</span> Lastnode(p-&gt;lchild);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> p-&gt;lchild; <span class="comment">//rtag==1 直接返回后继线索</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对中序线索二叉树进行逆向中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RevInorder</span><span class="params">(ThreadNode *T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(ThreadNode *p=LastNode(T); p!=<span class="literal">NULL</span>; p=Prenode(p))</span><br><span class="line">        visit(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、先序遍历"><a href="#二、先序遍历" class="headerlink" title="二、先序遍历"></a>二、先序遍历</h2><h4 id="1、先序遍历后继结点"><a href="#1、先序遍历后继结点" class="headerlink" title="1、先序遍历后继结点"></a>1、先序遍历后继结点</h4><p>在先序线索二叉树中找到指定结点*p的先序后继next</p><p>因为此时结点p必有右孩子结点，而先序遍历顺序是根、左、右的顺序所以此时分两种情况</p><p>（1） 若p的左孩子存在，则先序遍历的后继结点就是p的左孩子结点</p><blockquote><p>由于先序遍历顺序是根、左、右，p结点是第一个被访问的，接下来是p的左孩子以及左孩子为根节点的子树，首先应该访问p的左孩子，所以p的后继就是p的左孩子结点。</p></blockquote><p>（2）若p的左孩子不存在，则先序遍历的后继结点是p的右孩子结点</p><blockquote><p>与上述情况相同</p></blockquote><p>代码实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类似上面</span></span><br></pre></td></tr></table></figure><h4 id="2、先序遍历前驱结点"><a href="#2、先序遍历前驱结点" class="headerlink" title="2、先序遍历前驱结点"></a>2、先序遍历前驱结点</h4><p>在先序线索二叉树中找到指定结点*p的先序前驱pre</p><p>因为此时结点p必有左孩子结点，而先序遍历顺序是根、左、右的顺序所以此时无法找到p结点的父节点。</p><p>但若该线索二叉树是用三叉链表组成的，就可以找到结点p的父节点。分为如下四种情况：</p><p>（1）若可以找到p的父节点，且p是左孩子，则先序前驱为p的父节点</p><p>（2）若可以找到p的父节点，且p是右孩子，其左兄弟为空，则先序前驱为p的父节点</p><p>（3）若可以找到p的父节点，且p是右孩子，其左兄弟不为空，则先序前驱是p的父节点的左孩子子树中最后一个被先序遍历的结点</p><p>（4）若p是根节点，则没有先序前驱</p><p>代码实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类似上面</span></span><br></pre></td></tr></table></figure><h2 id="三、后序遍历"><a href="#三、后序遍历" class="headerlink" title="三、后序遍历"></a>三、后序遍历</h2><h4 id="1、后序遍历后继结点"><a href="#1、后序遍历后继结点" class="headerlink" title="1、后序遍历后继结点"></a>1、后序遍历后继结点</h4><p>在先序线索二叉树中找到指定结点*p的先序后继next</p><p>因为此时结点p必有右孩子结点，后序遍历的顺序是左、右、根，所以此时无法找到p结点的父节点。</p><p>但若该线索二叉树是用三叉链表组成的，就可以找到结点p的父节点。分为如下四种情况：</p><p>（1）若可以找到p的父节点，且p是右孩子，则后序后继为p的父节点</p><p>（2）若可以找到p的父节点，且p是左孩子，其右兄弟为空，则p的后序后继为p的父节点</p><p>（3）若可以找到p的父节点，且p是左孩子，其右兄弟不为空，则p的后序后继是p的父节点的右孩子子树中第一个被后序遍历的结点</p><p>（4）若p是根节点，则没有后序后继</p><p>代码实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类似上面</span></span><br></pre></td></tr></table></figure><h4 id="2、后序遍历前驱结点"><a href="#2、后序遍历前驱结点" class="headerlink" title="2、后序遍历前驱结点"></a>2、后序遍历前驱结点</h4><p>在先序线索二叉树中找到指定结点*p的先序后继pre</p><p>因为此时结点p必有左孩子结点，而后序遍历顺序是左、右、根的顺序所以此时分两种情况：</p><p>（1）若p有右孩子，则后续前驱为右孩子</p><p>（2）若p没有右孩子，则后续前驱为左孩子</p><p>代码实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类似上面</span></span><br></pre></td></tr></table></figure><h5 id="知识框架图如下："><a href="#知识框架图如下：" class="headerlink" title="知识框架图如下："></a>知识框架图如下：</h5><p><img src="/2021/01/29/%E5%85%B3%E4%BA%8E%E5%AD%A6%E4%B9%A0%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%A7%8D%E7%A7%8D%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/1.png" alt="11"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于学习线索二叉树寻找前驱-后继的种种问题分析&quot;&gt;&lt;a href=&quot;#关于学习线索二叉树寻找前驱-后继的种种问题分析&quot; class=&quot;headerlink&quot; title=&quot;关于学习线索二叉树寻找前驱/后继的种种问题分析&quot;&gt;&lt;/a&gt;关于学习线索二叉树寻找前驱/后继的种种问题分析&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;在复习数据结构的过程中，我发现线索二叉树的寻找前驱后继的问题十分繁琐，特此在这里总结一下学习中的收获与感悟。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;中序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;中序遍历后继结点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;中序遍历前驱结点&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;先序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先序遍历后继结点&lt;/li&gt;
&lt;li&gt;先序遍历前驱结点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;后序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;后序遍历后继结点&lt;/li&gt;
&lt;li&gt;后序遍历前驱结点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="data structure" scheme="https://zhouxyly.github.io/tags/data-structure/"/>
    
  </entry>
  
  <entry>
    <title>什么是事务处理</title>
    <link href="https://zhouxyly.github.io/2020/04/18/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/"/>
    <id>https://zhouxyly.github.io/2020/04/18/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/</id>
    <published>2020-04-18T09:19:36.000Z</published>
    <updated>2020-04-18T09:28:30.916Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是事务处理，如何使用COMMIT和ROLLBACK进行操作？"><a href="#什么是事务处理，如何使用COMMIT和ROLLBACK进行操作？" class="headerlink" title="什么是事务处理，如何使用COMMIT和ROLLBACK进行操作？"></a>什么是事务处理，如何使用COMMIT和ROLLBACK进行操作？</h3><p>提到事务，你肯定不陌生，和数据库打交道的时候，我们总是会用到事务。最经典的例子就是转账，你要给朋友小王转 100 块钱，而此时你的银行卡只有 100 块钱。</p><p>转账过程具体到程序里会有一系列的操作，比如查询余额、做加减法、更新余额等，这些操作必须保证是一体的，不然等程序查完之后，还没做减法之前，你这 100 块钱，完全可以借着这个时间差再查一次，然后再给另外一个朋友转账，如果银行这么整，不就乱了么？这时就要用到“事务”这个概念了。</p><p>简单来说，事务就是要保证一组数据库操作，要么全部成功，要么全部失败。在 MySQL 中，事务支持是在引擎层实现的。你现在知道，MySQL 是一个支持多引擎的系统，但并不是所有的引擎都支持事务。比如 MySQL 原生的 MyISAM 引擎就不支持事务，这也是 MyISAM 被 InnoDB 取代的重要原因之一。</p><a id="more"></a><p>今天我给大家分享一下SQL中的事务。从今天的分享中，你可以重点掌握以下内容：</p><ol><li>事务的特性是什么？如何理解他们？</li><li>如何对事务进行控制？控制的命令都有哪些？</li><li>为什么我们执行COMMIT、ROLLBACK这些命令的时候，有时候会成功，有时候会失败？</li></ol><h3 id="事务的特性：ACID"><a href="#事务的特性：ACID" class="headerlink" title="事务的特性：ACID"></a>事务的特性：ACID</h3><p>提到事务，你肯定会想到 ACID（Atomicity、Consistency、Isolation、Durability，即原子性、一致性、隔离性、持久性）</p><ol><li>A，也就是原子性（Atomicity）。原子的概念就是不可分割，你可以把它理解为组成物质的基本单位，也是我们进行数据处理操作的基本单位。</li><li>C，就是一致性（Consistency）。一致性指的就是数据库在进行事务操作后，会由原来的一致状态，变成另一种一致的状态。也就是说当事务提交后，或者当事务发生回滚后，数据库的完整性约束不能被破坏。</li><li>I，就是隔离性（Isolation）。它指的是每个事务都是彼此独立的，不会受到其他事务的执行影响。也就是说一个事务在提交之前，对其他事务都是不可见的。</li><li>最后一个 D，指的是持久性（Durability）。事务提交之后对数据的修改是持久性的，即使在系统出故障的情况下，比如系统崩溃或者存储介质发生故障，数据的修改依然是有效的。因为当事务完成，数据库的日志就会被更新，这时可以通过日志，让系统恢复到最后一次成功的更新状态。</li></ol><p>这里指的一致性本身是由具体的业务定义的，也就是说，任何写入数据库中的数据都需要满足我们事先定义的约束规则。</p><p>比如说，在数据表中我们将姓名字段设置为唯一性约束，这时当事务进行提交或者事务发生回滚的时候，如果数据表中的姓名非唯一，就破坏了事务的一致性要求。所以说，事务操作会让数据表的状态变成另一种一致的状态，如果事务中的某个操作失败了，系统就会自动撤销当前正在执行的事务，返回到事务操作之前的状态。</p><p>事务的另一个特点就是持久性，持久性是通过事务日志来保证的。日志包括了回滚日志和重做日志。当我们通过事务对数据进行修改的时候，首先会将数据库的变化信息记录到重做日志中，然后再对数据库中对应的行进行修改。这样做的好处是，即使数据库系统崩溃，数据库重启后也能找到没有更新到数据库系统中的重做日志，重新执行，从而使事务具有持久性。</p><h3 id="事务的控制"><a href="#事务的控制" class="headerlink" title="事务的控制"></a>事务的控制</h3><p>当我们了解了事务的特性后，再来看下如何使用事务。我们知道 Oracle 是支持事务的，而在 MySQL 中，则需要选择适合的存储引擎才可以支持事务。如果你使用的是 MySQL，可以通过 SHOW ENGINES 命令来查看当前 MySQL 支持的存储引擎都有哪些，以及这些存储引擎是否支持事务。</p><p>你能看出在 MySQL 中，InnoDB 是支持事务的，而 MyISAM 存储引擎不支持事务。</p><p>看到这里，我们已经对事务有了一定的了解，现在我们再来看下事务的常用控制语句都有哪些。</p><ol><li>START TRANSACTION 或者 BEGIN，作用是显式开启一个事务。</li><li>COMMIT：提交事务。当提交事务后，对数据库的修改是永久性的。</li><li>ROLLBACK 或者 ROLLBACK TO [SAVEPOINT]，意为回滚事务。意思是撤销正在进行的所有没有提交的修改，或者将事务回滚到某个保存点。</li><li>SAVEPOINT：在事务中创建保存点，方便后续针对保存点进行回滚。一个事务中可以存在多个保存点。</li><li>RELEASE SAVEPOINT：删除某个保存点。</li><li>SET TRANSACTION，设置事务的隔离级别。</li></ol><p>需要说明的是，使用事务有两种方式，分别为隐式事务和显式事务。隐式事务实际上就是自动提交，Oracle 默认不自动提交，需要手写 COMMIT 命令，而 MySQL 默认自动提交，当然我们可以配置 MySQL 的参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set autocommit &#x3D;0;  &#x2F;&#x2F; 关闭自动提交</span><br><span class="line"></span><br><span class="line">mysql&gt; set autocommit &#x3D;1;  &#x2F;&#x2F; 开启自动提交</span><br></pre></td></tr></table></figure><p>我们看下在 MySQL 的默认状态下，下面这个事务最后的处理结果是什么：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE test(name varchar(255), PRIMARY KEY (name)) ENGINE&#x3D;InnoDB;</span><br><span class="line">BEGIN;</span><br><span class="line">INSERT INTO test SELECT &#39;关羽&#39;;</span><br><span class="line">COMMIT;</span><br><span class="line">BEGIN;</span><br><span class="line">INSERT INTO test SELECT &#39;张飞&#39;;</span><br><span class="line">INSERT INTO test SELECT &#39;张飞&#39;;</span><br><span class="line">ROLLBACK;</span><br><span class="line">SELECT * FROM test;</span><br></pre></td></tr></table></figure><p>运行结果（1 行数据）：</p><table><thead><tr><th>name</th></tr></thead><tbody><tr><td>关羽</td></tr></tbody></table><p>在这个事务中，整个 SQL 一共执行了 2 个事务，第一个是插入“关羽”，提交后执行成功，第二个是插入两次“张飞”，这里需要注意的是，我们将 name 设置为了主键，也就是说主键的值是唯一的，那么第二次插入“张飞”时就会产生错误，然后执行 ROLLBACK 相当于对事务进行了回滚，所以我们看到最终结果只有一行数据，也就是第一个事务执行之后的结果，即“关羽”。</p><p>那么如果我们进行下面的操作又会怎样呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE test(name varchar(255), PRIMARY KEY (name)) ENGINE&#x3D;InnoDB;</span><br><span class="line">BEGIN;</span><br><span class="line">INSERT INTO test SELECT &#39;关羽&#39;;</span><br><span class="line">COMMIT;</span><br><span class="line">INSERT INTO test SELECT &#39;张飞&#39;;</span><br><span class="line">INSERT INTO test SELECT &#39;张飞&#39;;</span><br><span class="line">ROLLBACK;</span><br><span class="line">SELECT * FROM test;</span><br></pre></td></tr></table></figure><table><thead><tr><th>name</th></tr></thead><tbody><tr><td>关羽</td></tr><tr><td>张飞</td></tr></tbody></table><p>你能看到这次数据是 2 行，上一次操作我把两次插入“张飞”放到一个事务里，而这次操作它们不在同一个事务里，那么对于 MySQL 来说，默认情况下这实际上就是两个事务，因为在 autocommit=1 的情况下，MySQL 会进行隐式事务，也就是自动提交，因此在进行第一次插入“张飞”后，数据表里就存在了两行数据，而第二次插入“张飞”就会报错：<code>1062 - Duplicate entry &#39;张飞&#39; for key &#39;PRIMARY&#39;</code>。</p><p>最后我们在执行 ROLLBACK 的时候，实际上事务已经自动提交了，就没法进行回滚了。</p><p>同样的我们再来看下这段代码，你又能发现什么不同呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE test(name varchar(255), PRIMARY KEY (name)) ENGINE&#x3D;InnoDB;</span><br><span class="line">SET @@completion_type &#x3D; 1;</span><br><span class="line">BEGIN;</span><br><span class="line">INSERT INTO test SELECT &#39;关羽&#39;;</span><br><span class="line">COMMIT;</span><br><span class="line">INSERT INTO test SELECT &#39;张飞&#39;;</span><br><span class="line">INSERT INTO test SELECT &#39;张飞&#39;;</span><br><span class="line">ROLLBACK;</span><br><span class="line">SELECT * FROM test;</span><br></pre></td></tr></table></figure><p>运行结果（1 行数据）：</p><table><thead><tr><th>name</th></tr></thead><tbody><tr><td>关羽</td></tr></tbody></table><p>你能看到还是相同的 SQL 代码，只是我在事务开始之前设置了<code>SET @@completion_type = 1;</code>，结果就和我们第一次处理的一样，只有一个“关羽”。这是为什么呢？</p><p>这里我讲解下 MySQL 中 completion_type 参数的作用，实际上这个参数有 3 种可能：</p><ol><li>completion=0，这是默认情况。也就是说当我们执行 COMMIT 的时候会提交事务，在执行下一个事务时，还需要我们使用 START TRANSACTION 或者 BEGIN 来开启。</li><li>completion=1，这种情况下，当我们提交事务后，相当于执行了 COMMIT AND CHAIN，也就是开启一个链式事务，即当我们提交事务之后会开启一个相同隔离级别的事务（隔离级别会在下一节中进行介绍）。</li><li>completion=2，这种情况下 COMMIT=COMMIT AND RELEASE，也就是当我们提交后，会自动与服务器断开连接。</li></ol><p>在上面这段代码里，我使用了 completion=1，也就是说当我提交之后，相当于在下一行写了一个 START TRANSACTION 或 BEGIN。这时两次插入“张飞”会被认为是在同一个事务之内的操作，那么第二次插入“张飞”就会导致事务失败，而回滚也将这次事务进行了撤销，所以你能看到的结果就只有一个“关羽”。</p><p>通过这样简单的练习，你应该能体会到事务提交和回滚的操作。</p><p>当我们设置 autocommit=0 时，不论是否采用 START TRANSACTION 或者 BEGIN 的方式来开启事务，都需要用 COMMIT 进行提交，让事务生效，使用 ROLLBACK 对事务进行回滚。</p><p>当我们设置 autocommit=1 时，每条 SQL 语句都会自动进行提交。<br>不过这时，如果你采用 START TRANSACTION 或者 BEGIN 的方式来显式地开启事务，那么这个事务只有在 COMMIT 时才会生效，在 ROLLBACK 时才会回滚。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/2020/04/18/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/1.png" alt="总结"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是事务处理，如何使用COMMIT和ROLLBACK进行操作？&quot;&gt;&lt;a href=&quot;#什么是事务处理，如何使用COMMIT和ROLLBACK进行操作？&quot; class=&quot;headerlink&quot; title=&quot;什么是事务处理，如何使用COMMIT和ROLLBACK进行操作？&quot;&gt;&lt;/a&gt;什么是事务处理，如何使用COMMIT和ROLLBACK进行操作？&lt;/h3&gt;&lt;p&gt;提到事务，你肯定不陌生，和数据库打交道的时候，我们总是会用到事务。最经典的例子就是转账，你要给朋友小王转 100 块钱，而此时你的银行卡只有 100 块钱。&lt;/p&gt;
&lt;p&gt;转账过程具体到程序里会有一系列的操作，比如查询余额、做加减法、更新余额等，这些操作必须保证是一体的，不然等程序查完之后，还没做减法之前，你这 100 块钱，完全可以借着这个时间差再查一次，然后再给另外一个朋友转账，如果银行这么整，不就乱了么？这时就要用到“事务”这个概念了。&lt;/p&gt;
&lt;p&gt;简单来说，事务就是要保证一组数据库操作，要么全部成功，要么全部失败。在 MySQL 中，事务支持是在引擎层实现的。你现在知道，MySQL 是一个支持多引擎的系统，但并不是所有的引擎都支持事务。比如 MySQL 原生的 MyISAM 引擎就不支持事务，这也是 MyISAM 被 InnoDB 取代的重要原因之一。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Mysql" scheme="https://zhouxyly.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>JDK源码的学习与学习方法</title>
    <link href="https://zhouxyly.github.io/2020/04/07/JDK%E6%BA%90%E7%A0%81%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    <id>https://zhouxyly.github.io/2020/04/07/JDK%E6%BA%90%E7%A0%81%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/</id>
    <published>2020-04-07T10:41:39.000Z</published>
    <updated>2020-04-07T11:18:45.222Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java源码查看，利用IDEA快速创建一个源码阅读环境教程"><a href="#Java源码查看，利用IDEA快速创建一个源码阅读环境教程" class="headerlink" title="Java源码查看，利用IDEA快速创建一个源码阅读环境教程"></a>Java源码查看，利用IDEA快速创建一个源码阅读环境教程</h2><hr><p>光阴如梭，转眼到了大二，感觉上了一年多什么都没有学到，今天在B站发现了我羊哥整理了一个利用IDEA创建一个源码的阅读环境，赶紧学起来！！！</p><hr><a id="more"></a><h3 id="第一步：创建一个简单的Java项目"><a href="#第一步：创建一个简单的Java项目" class="headerlink" title="第一步：创建一个简单的Java项目"></a>第一步：创建一个简单的Java项目</h3><p><img src="/2020/04/07/JDK%E6%BA%90%E7%A0%81%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/1.png" alt="1"></p><h3 id="第二步：创建目录"><a href="#第二步：创建目录" class="headerlink" title="第二步：创建目录"></a>第二步：创建目录</h3><p><img src="/2020/04/07/JDK%E6%BA%90%E7%A0%81%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/2.png" alt="2"></p><h3 id="第三步：把你的源码放入source文件夹里面"><a href="#第三步：把你的源码放入source文件夹里面" class="headerlink" title="第三步：把你的源码放入source文件夹里面"></a>第三步：把你的源码放入source文件夹里面</h3><p><strong><del>（因为如果要运行你的测试函数的话，IDEA会把source里面的所有函数全部build一下，如果不相等太久，和电脑配置不是很好的同学，可以跳过这一步）</del></strong></p><blockquote><p>可能有的小伙伴不知道源码在哪里，其实就是在你安装的JDK目录下的src.zip压缩包就是你的JDK源码，这时候知道安装目录的小伙伴可以直接前往，不知道小伙伴可以点开设置File-&gt;Project Structure-&gt;Platform Settings-&gt;SDKs-&gt;Sourcepath                                                                                                          这样你就可以找到src.zip的目录了</p></blockquote><p>找到这个文件后复制它把他放到你创建工程下的source文件夹下，然后解压到当前文件夹就可以了<del>（然后就可以把zip删掉了）</del></p><h3 id="第四步：调整你的IDEA缓存大小（这一步同上，没有上面那一步，这一步可以不用修改）、"><a href="#第四步：调整你的IDEA缓存大小（这一步同上，没有上面那一步，这一步可以不用修改）、" class="headerlink" title="第四步：调整你的IDEA缓存大小（这一步同上，没有上面那一步，这一步可以不用修改）、"></a>第四步：调整你的IDEA缓存大小（这一步同上，没有上面那一步，这一步可以不用修改）、</h3><p>打开设置File-&gt;Bulid,Execution,Deployment-&gt;Compiler</p><p><img src="/2020/04/07/JDK%E6%BA%90%E7%A0%81%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/3.png" alt="3"></p><h3 id="第五步：取消JDK源码保护机制"><a href="#第五步：取消JDK源码保护机制" class="headerlink" title="第五步：取消JDK源码保护机制"></a>第五步：取消JDK源码保护机制</h3><p>打开设置File-&gt;Bulid,Execution,Deployment-&gt;Debugger-&gt;Data Views-&gt;Stepping</p><p><img src="/2020/04/07/JDK%E6%BA%90%E7%A0%81%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/4.png" alt="4"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注：此处是因为如果你此时就开始调试程序（按F7），并不会直接进入后面的源代码，因为JDK对源码有保护，所以取消这个再调试就可以跳转到相应的源代码函数了。</span><br></pre></td></tr></table></figure><h3 id="第六步：（可选）给源码添加注释"><a href="#第六步：（可选）给源码添加注释" class="headerlink" title="第六步：（可选）给源码添加注释"></a>第六步：（可选）给源码添加注释</h3><p>有些小伙伴们喜欢在学习的过程中随手写上注释，这样如果下次调用的这个函数的时候就可以很方便的看到这个函数执行了什么，或者怎么执行的。</p><p>但是，此时你开始调试你会发现，弹出的源码并不能修改，所以此处要做如下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">打开设置File-&gt;Project Structure-&gt;Platform Settings-&gt;SDKs-&gt;Sourcepath</span><br></pre></td></tr></table></figure><p>这一步同找JDK路径</p><p><img src="/2020/04/07/JDK%E6%BA%90%E7%A0%81%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/5.png" alt="5"></p><h3 id="最后：结束"><a href="#最后：结束" class="headerlink" title="最后：结束"></a>最后：结束</h3><p>到此你就可以开始<del>快乐</del>的阅读源码了</p><h3 id="注：一些问题"><a href="#注：一些问题" class="headerlink" title="注：一些问题"></a>注：一些问题</h3><p>如果你发现你在build源码的时候发现com.sum经常报错！！</p><p>最简单果断的方式就是删除它= =</p><p>没什么太大影响，但是如果你删除了，就不哟啊执行最后一步， 因为最后一步是把系统调用JDK编译源码放在当前目录下，如果以后写的测试函数包含了sum下的包，就无法运行了</p><hr><h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>最后附上JDK阅读中几个优先看的包</p><p><strong>lang  :  基础数据包装类型：</strong></p><table><thead><tr><th align="left">类中文件夹</th><th>文件夹内容</th></tr></thead><tbody><tr><td align="left">reflect</td><td>Java反射机制</td></tr><tr><td align="left">annotation</td><td>Java注解</td></tr><tr><td align="left">其他散类</td><td><!--都要看--></td></tr></tbody></table><p><strong>util  :  Java各种基本工具</strong> </p><table><thead><tr><th>类中文件夹</th><th>文件夹内容</th></tr></thead><tbody><tr><td>concurrent</td><td>Java的多线程与并发</td></tr><tr><td>concurrent–&gt;atomic</td><td>原子类</td></tr><tr><td>concurrent–&gt;atomic–&gt;locks</td><td>Java锁的实现</td></tr><tr><td>concurrent–&gt;atomic–&gt;function</td><td>Java函数式编程接口</td></tr><tr><td>concurrent–&gt;atomic–&gt;stream</td><td>流操作的实现</td></tr><tr><td>其他散类</td><td><!--都要看--></td></tr></tbody></table><p><strong>io  :  阻塞io</strong></p><table><thead><tr><th>类中文件夹</th><th>文件夹内容</th></tr></thead><tbody><tr><td>全部</td><td><!--都要看--></td></tr></tbody></table><p><strong>nio  :  非阻塞io</strong></p><table><thead><tr><th>类中文件夹</th><th>文件夹内容</th></tr></thead><tbody><tr><td>全部</td><td><!--都要看--></td></tr></tbody></table><p><strong>math  :  各种数学</strong></p><table><thead><tr><th>类中文件夹</th><th>文件夹内容</th></tr></thead><tbody><tr><td>全部</td><td><!--都要看--></td></tr></tbody></table><p><strong>time  :  日期和时间类</strong></p><table><thead><tr><th>类中文件夹</th><th>文件夹内容</th></tr></thead><tbody><tr><td>全部除去文件夹</td><td><!--都要看--></td></tr></tbody></table><p><strong>net  :  Java网络通信</strong></p><table><thead><tr><th>类中文件夹</th><th>文件夹内容</th></tr></thead><tbody><tr><td>全部</td><td><!--都要看--></td></tr></tbody></table><h3 id="特别安利感谢："><a href="#特别安利感谢：" class="headerlink" title="特别安利感谢："></a>特别安利感谢：</h3><blockquote><p>本博客来源自B站程序羊的视频，个人觉得很有用，就整理出来一下</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java源码查看，利用IDEA快速创建一个源码阅读环境教程&quot;&gt;&lt;a href=&quot;#Java源码查看，利用IDEA快速创建一个源码阅读环境教程&quot; class=&quot;headerlink&quot; title=&quot;Java源码查看，利用IDEA快速创建一个源码阅读环境教程&quot;&gt;&lt;/a&gt;Java源码查看，利用IDEA快速创建一个源码阅读环境教程&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;光阴如梭，转眼到了大二，感觉上了一年多什么都没有学到，今天在B站发现了我羊哥整理了一个利用IDEA创建一个源码的阅读环境，赶紧学起来！！！&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://zhouxyly.github.io/categories/Java/"/>
    
    
      <category term="JDK学习" scheme="https://zhouxyly.github.io/tags/JDK%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>request.getCharacterEncoding()返回NULL--Java web出现乱码的解决办法及其原因</title>
    <link href="https://zhouxyly.github.io/2020/04/06/request-getCharacterEncoding-%E8%BF%94%E5%9B%9ENULL-Java-web%E5%87%BA%E7%8E%B0%E4%B9%B1%E7%A0%81%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%E5%8F%8A%E5%85%B6%E5%8E%9F%E5%9B%A0/"/>
    <id>https://zhouxyly.github.io/2020/04/06/request-getCharacterEncoding-%E8%BF%94%E5%9B%9ENULL-Java-web%E5%87%BA%E7%8E%B0%E4%B9%B1%E7%A0%81%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%E5%8F%8A%E5%85%B6%E5%8E%9F%E5%9B%A0/</id>
    <published>2020-04-06T07:50:39.000Z</published>
    <updated>2020-04-06T07:51:49.028Z</updated>
    
    <content type="html"><![CDATA[<h3 id="request-getCharacterEncoding-返回NULL——Java-web出现乱码的解决办法及其原因"><a href="#request-getCharacterEncoding-返回NULL——Java-web出现乱码的解决办法及其原因" class="headerlink" title="request.getCharacterEncoding()返回NULL——Java web出现乱码的解决办法及其原因"></a>request.getCharacterEncoding()返回NULL——Java web出现乱码的解决办法及其原因</h3><hr><p>今天在学习Jsp的九大内置对象时候，发现了我再服务器端要是想获取客户端提交的字符编码时候，调用getCharacterEncoding()函数的时候发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(request.getCharacterEncoding());&#x2F;&#x2F;输出null</span><br><span class="line">System.out.println(response.getCharacterEncoding());&#x2F;&#x2F;输出ISO-8859-1</span><br></pre></td></tr></table></figure><a id="more"></a><p>这让我很疑惑，为什么request会输出null，明明在客户端设置了提交编码，服务端竟然不知道</p><p>在之后我，进行了一些资料的查询，就懂了之间缘由。</p><p>先说为什么出现乱码，当有人在客户端提交了某些信息字符串，首先，客户端会讲用户所提交的信息进行编码将其转化为二进制字节流，传输到服务器端后，服务器使用服务器端所指定的字符编码进行解码操作，若两次的编码集不同，就会无法解释导致乱码。</p><hr><p>Jsp中客户端发送字节流到服务端接收时候，服务端并不知道客户端是以什么编码集来编码的，所以此时get编码集就会出现null值。</p><p>服务端可以request.setCharacterEncoding(“UTF-8”)，从而对客户端传输的字节流进行解码。</p><hr><h3 id="三种乱码"><a href="#三种乱码" class="headerlink" title="三种乱码"></a>三种乱码</h3><p><strong>1.post请求出现乱码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br></pre></td></tr></table></figure><p>只需要在这里设置一行服务器的解码格式就可以修改乱码</p><p><strong>2、get请求出现乱码</strong></p><p>​    <strong>1.方法一：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 新建一个String对象，把request获取到的uname值强行转化为原始字节流，然后再用utf8编码格式修改回字符串 --&gt;</span><br><span class="line"><span class="keyword">new</span> String(uname.getBytes(),<span class="string">"utf-8"</span>);</span><br><span class="line">&lt;!-- 或者 --&gt;</span><br><span class="line"><span class="keyword">new</span> String(uname.getBytes(<span class="string">"iso-8859-1"</span>),<span class="string">"utf-8"</span>);</span><br></pre></td></tr></table></figure><p>​    <strong>2.方法二：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port&#x3D;&quot;8080&quot; protocol&#x3D;&quot;HTTP&#x2F;1.1&quot;</span><br><span class="line">              connectionTimeout&#x3D;&quot;20000&quot;</span><br><span class="line">              redirectPort&#x3D;&quot;8443&quot;  URIEncoding&#x3D;&quot;UTF-8&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>更改tomcat安装目录下面的conf中的server.xml,找到Connector，添加URIEncoding=“UTF-8”</p><p><strong>3.页面中出现中文乱码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br></pre></td></tr></table></figure><p>只需要在开头部分添加这行代码，就可以修改本页面编码格式</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;request-getCharacterEncoding-返回NULL——Java-web出现乱码的解决办法及其原因&quot;&gt;&lt;a href=&quot;#request-getCharacterEncoding-返回NULL——Java-web出现乱码的解决办法及其原因&quot; class=&quot;headerlink&quot; title=&quot;request.getCharacterEncoding()返回NULL——Java web出现乱码的解决办法及其原因&quot;&gt;&lt;/a&gt;request.getCharacterEncoding()返回NULL——Java web出现乱码的解决办法及其原因&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;今天在学习Jsp的九大内置对象时候，发现了我再服务器端要是想获取客户端提交的字符编码时候，调用getCharacterEncoding()函数的时候发现&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(request.getCharacterEncoding());&amp;#x2F;&amp;#x2F;输出null&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(response.getCharacterEncoding());&amp;#x2F;&amp;#x2F;输出ISO-8859-1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://zhouxyly.github.io/categories/Java/"/>
    
    
      <category term="Jsp" scheme="https://zhouxyly.github.io/tags/Jsp/"/>
    
  </entry>
  
  <entry>
    <title>We Are The World ,We Are The Future</title>
    <link href="https://zhouxyly.github.io/2020/03/30/We-Are-The-World-We-Are-The-Future/"/>
    <id>https://zhouxyly.github.io/2020/03/30/We-Are-The-World-We-Are-The-Future/</id>
    <published>2020-03-30T03:52:24.000Z</published>
    <updated>2020-03-30T03:54:24.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="We-Are-The-World-We-Are-The-Future"><a href="#We-Are-The-World-We-Are-The-Future" class="headerlink" title="We Are The World ,We Are The Future"></a>We Are The World ,We Are The Future</h1><p>Someone said “we are reading the first verse of the first chapter of a book, whose pages are infinite”. I don’t know who wrote these words, but I’ve always liked them as a reminder that the future can be anything we want it to be. We are all in the position of the farmers. If we plant a good seed ,we reap a good harvest. If we plant nothing at all, we harvest nothing at all.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">有人说“我们正在读一本书的第一章的第一节,页数无限的”。</span><br><span class="line">我不知道谁写的这些话,但我一直很喜欢他们提醒人们,可以是任何我们想要的未来。</span><br><span class="line">我们都是农民的地位。</span><br><span class="line">我们若种下好种子,我们收获丰收。</span><br><span class="line">如果我们工厂什么都没有,我们什么也没收获。</span><br></pre></td></tr></table></figure><a id="more"></a><p>We are young. “How to spend the youth?” It is a meaningful question. To answer it, first I have to ask “what do you understand by the word youth?” Youth is not a time of life, it’s a state of mind. It’s not a matter of rosy cheeks, red lips or supple knees. It’s the matter of the will. It’s the freshness of the deep spring of life.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">我们年轻的时候。</span><br><span class="line">“如何度过青春?</span><br><span class="line">“这是一个有意义的问题。</span><br><span class="line">要回答这个问题,首先我要问“你怎么理解这个词的青年吗?</span><br><span class="line">“青春不是生命的一个阶段,它是一种心态。</span><br><span class="line">它不是红润的面颊,红色的嘴唇和柔软的膝盖。</span><br><span class="line">它的问题。</span><br><span class="line">它是生命的深泉的清新。</span><br></pre></td></tr></table></figure><p>A poet said “To see a world in a grain of sand, and a heaven in a wild flower, hold infinity in the palm of your hand, and eternity in an hour. Several days ago, I had a chance to listen to a lecture. I learnt a lot there. I’d like to share it with all of you. Let’s show our right palms. We can see three lines that show how our love.career and life is. I have a short line of life. What about yours? I wondered whether we could see our future in this way. Well, let’s make a fist. Where is our future? Where is our love, career, and life? Tell me.Yeah, it is in our hands. It is held in ourselves.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">一个诗人说:“从一粒沙子看到一个世界,从一朵野花看到一个天堂,把无限放在你的手掌,永恒也就消融于一个时辰。</span><br><span class="line">几天前,我有机会听一个讲座。</span><br><span class="line">我学到了很多。</span><br><span class="line">我想与大家分享。</span><br><span class="line">让我们展示我们的右手掌。</span><br><span class="line">我们可以看到三行,展示我们的爱。</span><br><span class="line">职业和生活。</span><br><span class="line">我有一个短线的生活。</span><br><span class="line">你的呢?</span><br><span class="line">我想知道是否我们可以看到我们的未来。</span><br><span class="line">好吧,让我们做一个拳头。</span><br><span class="line">我们的未来在哪里?</span><br><span class="line">哪里是我们的爱,事业和生活?</span><br><span class="line">告诉我。</span><br><span class="line">是的,它是在我们的手中。</span><br><span class="line">这是在自己举行。</span><br></pre></td></tr></table></figure><p>We all want the future to be better than the past. But the future can go better itself. Don’t cry because it is over, smile because it happened. From the past, we’ve learnt that the life is tough, but we are tougher. We’ve learnt that we can’t choose how we feel, but we can choose what about it. Failure doesn’t mean you don’t have it, it does mean you should do it in a different way. Failure doesn’t mean you should give up, it does mean you must try harder.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">我们都希望未来会比过去更好。</span><br><span class="line">但是未来可以更好的自己。</span><br><span class="line">不要因为完结而哭,要为曾经发生而微笑。</span><br><span class="line">从过去,我们知道,生活是艰苦的,但我们是更坚强。</span><br><span class="line">我们知道我们不能选择我们的感觉,但我们可以选择。</span><br><span class="line">失败并不意味着你不拥有它,它意味着你应该换一种方式。</span><br><span class="line">失败并不意味着你应该放弃,它意味着你须更加努力。</span><br></pre></td></tr></table></figure><p>As what I said at the beginning, “we are reading the first verse of the first chapter of a book, whose pages are infinite”. The past has gone. Nothing we do will change it. But the future is in front of us. Believe that what we give to the world, the world will give to us. And from today on, let’s be the owners of ourselves, and speak out “We are the world, we are the future.”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">就像我一开始说,“我们正在读一本书的第一章的第一节,页数无限的”。</span><br><span class="line">过去的已经过去了。</span><br><span class="line">我们所做的任何事都不会改变它。</span><br><span class="line">但是未来是在我们面前。</span><br><span class="line">相信我们给世界,世界将给我们。</span><br><span class="line">从今天开始,我们是自己的主人,说出“我们是世界,我们是未来。”</span><br></pre></td></tr></table></figure><p><strong>Thank for listening.</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;We-Are-The-World-We-Are-The-Future&quot;&gt;&lt;a href=&quot;#We-Are-The-World-We-Are-The-Future&quot; class=&quot;headerlink&quot; title=&quot;We Are The World ,We Are The Future&quot;&gt;&lt;/a&gt;We Are The World ,We Are The Future&lt;/h1&gt;&lt;p&gt;Someone said “we are reading the first verse of the first chapter of a book, whose pages are infinite”. I don’t know who wrote these words, but I’ve always liked them as a reminder that the future can be anything we want it to be. We are all in the position of the farmers. If we plant a good seed ,we reap a good harvest. If we plant nothing at all, we harvest nothing at all.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;有人说“我们正在读一本书的第一章的第一节,页数无限的”。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我不知道谁写的这些话,但我一直很喜欢他们提醒人们,可以是任何我们想要的未来。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我们都是农民的地位。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我们若种下好种子,我们收获丰收。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果我们工厂什么都没有,我们什么也没收获。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Daily" scheme="https://zhouxyly.github.io/categories/Daily/"/>
    
    
      <category term="English_Story" scheme="https://zhouxyly.github.io/tags/English-Story/"/>
    
  </entry>
  
  <entry>
    <title>Do something for yourself</title>
    <link href="https://zhouxyly.github.io/2020/03/30/Do-something-for-yourself/"/>
    <id>https://zhouxyly.github.io/2020/03/30/Do-something-for-yourself/</id>
    <published>2020-03-30T03:09:31.000Z</published>
    <updated>2020-03-30T03:12:28.833Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Do-something-for-yourself"><a href="#Do-something-for-yourself" class="headerlink" title="Do something for yourself"></a>Do something for yourself</h1><hr><p>As a little boy, there was nothing I liked better than Sunday aftemoons at my grandfather’s farm in western Pennsylvania. </p><p>我小时候最喜欢在爷爷的农场里度过每个星期天的下午。 爷爷的农场在宾夕法尼亚州西部。 </p><p> Surrounded by miles of winding stonewalls, the house and barn provided endless hours of fun for a city kid like me. </p><p>农场四周都围上了绵延几英里的石墙。 房子和谷仓给我这个城市男孩带来了无穷的快乐时光。 </p><a id="more"></a><p> I was used to parlors neat as a pin that seemed to whisper, ‘Not to be touched!’ 我习惯了城里整洁的客厅 似乎在低声说：“不要摸!”。 </p><p> I can still remember one afternoon when I was eight years old. Since my first visit to the farm, I’d wanted more than anything to be allowed to climb the stonewalls surrounding the property. </p><p>我仍能记得我8岁那年一天下午的情景 因为我第一次去农场 所以我很想上那农场四周的那些石墙。 </p><p> My parents would never approve. The walls were old, some stones were missing, others loose and crumbling. </p><p>可我的父母是绝不会同意的 这些墙年深日久 有的石头不见了 有的石头松动倒塌了。 </p><p>Still, my yearning to scramble across those walls grew so strong. </p><p>然而，我渴望这些墙的欲望非常强烈。  </p><p>One spring afternoon, I summoned all my courage and entered the living room, where the adults had gathered after dinner. </p><p>一个春天的下午 我鼓足勇气，走进客厅 大人们午饭后都聚在这里  </p><p>I, uh, I want to climb the stonewalls,’ I said hesitantly. </p><p>“我，呃，我想爬那些石墙，” 我犹豫地说道  </p><p>Everyone looked up. ‘Can I climb the stonewalls?’ </p><p>大家都抬起头。 “我能去爬那些石墙吗?” </p><p>Instantly a chorus went up from the women in the room. ‘Heavens, no!’ they cried in dismay. ‘You’ll hurt yourself!’ </p><p>屋里的女人们马上齐声叫了起来 “天哪，不能!”她们惊慌地叫着 “你会伤着自己的!”  </p><p>I wasn’t too disappointed the response was just as I’d expected. 我并没有太失望，我早就预料会是这样的回答。  </p><p>But before I could leave the room, I was stopped by my grandfather’ s booming voice. </p><p>但还没等我离开客厅 爷爷低沉的声音拦住了我  </p><p>‘Hold on just a minute,’ I heard him say, ‘Let the boy climb the stonewalls. He has to learn to do things for himself.’ </p><p>“等一会儿，” 我听到他说 “让孩子爬那些石墙吧。他必须学会自己做一些事。”  </p><p>‘Scoot,’ he said to me with a wink, ‘and come and see me when you get back.’</p><p>“快走吧，”他对我眨眨眼说。 “你回来后找我。” </p><p>For the next two and a half hours I climbed those old walls and had the time of my life. </p><p>接下来的两个半小时， 我爬上了这些古老的石墙，别提有多开心。 </p><p>Later I met with my grandfather to tell him about my adventure. I’ll never forget what he said. </p><p>后来，我把自己冒险经历告诉了爷爷。 我永远也不会忘记他说过的话。  </p><p>‘Fred,’ he said, grinning, </p><p>“弗雷德，”他咧着嘴笑道。  </p><p>‘you made this day a special day just by being yourself. Always remember, there’s only one person in this whole world like you, and I like you exactly as you are.’ </p><p>“你做了一回自己， 你让这个日子因此而变得不同凡响。 永远记住，整个世界只有一个你， 而且我喜欢真实的你。”  </p><p>Many years have passed since then, and today I host the television program Mister Rogers’ Neighborhood, seen by millions of children throughout America. </p><p>许多年过去了， 现在我主持的电视节目《罗杰斯先生的街坊四邻》， 全美国几百万儿童都会收看。</p><p>  There have been changes over the years, but one thing remains the same: </p><p>几年过后，节目已经发生了一些变化，但有一点没变：  </p><p>my message to children at the end of almost every visit, ‘There’s only one person in this whole world like you, and people can like you exactly as you are.’ </p><p>几乎每期节日后我都会传递给孩子这样一个信息 “这个世界上只有一个你 人们都喜欢真实的你。”</p><p>Thank for your listening</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Do-something-for-yourself&quot;&gt;&lt;a href=&quot;#Do-something-for-yourself&quot; class=&quot;headerlink&quot; title=&quot;Do something for yourself&quot;&gt;&lt;/a&gt;Do something for yourself&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;As a little boy, there was nothing I liked better than Sunday aftemoons at my grandfather’s farm in western Pennsylvania. &lt;/p&gt;
&lt;p&gt;我小时候最喜欢在爷爷的农场里度过每个星期天的下午。 爷爷的农场在宾夕法尼亚州西部。 &lt;/p&gt;
&lt;p&gt; Surrounded by miles of winding stonewalls, the house and barn provided endless hours of fun for a city kid like me. &lt;/p&gt;
&lt;p&gt;农场四周都围上了绵延几英里的石墙。 房子和谷仓给我这个城市男孩带来了无穷的快乐时光。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Daily" scheme="https://zhouxyly.github.io/categories/Daily/"/>
    
    
      <category term="English_Story" scheme="https://zhouxyly.github.io/tags/English-Story/"/>
    
  </entry>
  
  <entry>
    <title>为什么要写博客-小白快速搭建博客</title>
    <link href="https://zhouxyly.github.io/2020/03/29/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%86%99%E5%8D%9A%E5%AE%A2-%E5%B0%8F%E7%99%BD%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://zhouxyly.github.io/2020/03/29/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%86%99%E5%8D%9A%E5%AE%A2-%E5%B0%8F%E7%99%BD%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-03-29T14:25:04.000Z</published>
    <updated>2020-03-29T14:29:39.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要写博客"><a href="#为什么要写博客" class="headerlink" title="为什么要写博客"></a>为什么要写博客</h2><hr><ol><li><p><strong>为了改变什么</strong></p><a id="more"></a><ul><li><p>从小到大，都没有怎么特别认真的对待某件事情或个方向，学习上也是随着自己的心情玩到大学，小学初中天天玩耍也能考到年级前百，基本上就是可以上市里面最好的高中了（肯定不是最好的班），这种顺风顺水的感觉一直延续到了高中，高中继续啃着以前的老本，（初中数学不错，参加了西交大少年班考试虽然最后没有考上）浑浑噩噩的度过了高中三年，高三的时候已经从清北班退步到了重点班（纯属因为高一学习还不错，分班竟然看了高一四次成绩的平均）听课越来越少，慢慢的感觉到了吃力，但是已经养成的习惯难以改变，继续似学非学的完成了高中，考了一个一本学校的二本专业，来到这个软件学科，小时候也喜欢玩电脑游戏，最早就在家接触过用汉语写的易语言，当时懵懂无知，跟着教程完成了人生中第一个小程序，一个整蛊小程序，上了大学，更多的编程语言天花乱坠，高深莫测的算法总是让我焦头烂额，我突然感觉到了危机感，第一次尝试ACM时候的我是震惊的，世界上怎么会有这么恶⭐变⭐的题目，于是我想去学，第一次想去努力学习知识，而不是被动的听，但是当我进入到语言的学习中去才发现，语言才是所有变成里面最简单的部分，各种算法的接踵而来，更新更厉害的框架架构层出不穷，就那么突然出现在了我的面前，我害怕了。但是我发现，我不知道该从哪个方向继续学习，各种知识点的零星碎片，难以建立一个完整的知识架构，所以我想尝试一次完整的努力过程，一次彻底的坚持下去的事情，我想培养一份坚持下去的勇气，强迫自己，就此改变！   <strong>I think I can change the whole world by code</strong></p><hr></li></ul></li><li><p><strong>为了学习！！</strong></p><ul><li><p>在这个特殊的寒假，在家实在是无聊，每天上课下课，完成作业，总觉得学了这么多了，需要做出来一个什么东西才行，可是反反复复发现自己不知道该去完成什么，一个机缘巧合，从B站发现了一个大佬的视频，Hexo快速搭建博客，让我眼前一亮，一个多月前，我才刚刚从阿里云上以学生身份免费获得了一台云服务器，我迫不及待的想要搭建一个自己的网站，可是研究才发现搭建网站的过程有些复杂，难以坚持下去的我，最终放弃了这个方向，直到我看到了这个视频，我觉得我也可以快速的完成一个小的个人小博客了。通过这个博客每天的记录，督促我的研究，我会把我学习所发现的问题或者发现的事情记录下来，相信这样的积累能够让我有一定的突破把！      </p><hr></li></ul></li><li><p><strong>分享我的一个简单的博客搭建过程</strong>（一切命令都在cmd下进行）</p><ul><li><p><strong>第一步：配置该项目所需要的相关软件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">下载nodejs和Git</span><br></pre></td></tr></table></figure><p><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">由于Nodejs官网经常打不开，这里提供一个能快速下载的网址</a></p><p>这一步很简单，选择相应的系统版本，下载玩打开，安装更简单一路next到底就好了</p><p>查看Nodejs版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">由于Git官网经常打不开，这里提供一个能快速下载的网址</a></p><p><a href="https://www.cnblogs.com/xueweisuoyong/archive/2019/11/22/11914045.html" target="_blank" rel="noopener">这里推荐一个Git安装连接可以快速安装教程</a></p><p>可以查看安装是否成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git -v   或者   git</span><br></pre></td></tr></table></figure></li><li><p><strong>第二步：查看npm版本号</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>若没有显示版本号，需要下载npm插件，这里就不说明了一般都已经有了</p></li><li><p><strong>第三步：下载淘宝镜像，更新cnpm</strong></p><p>由于从github上下载hexo可能网络不稳定，导致下载速度过慢，下载国内的会很方便</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;http:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">cnpm -v</span><br></pre></td></tr></table></figure><p>此时出现cnpm的版本号才证明安装完成</p></li><li><p><strong>第四步：下载hexo</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>同理出现版本号才证明安装完成</p></li><li><p><strong>第五步：创建博客文件夹</strong></p><p>注意：这里创建文件夹建议选择一个位置比较容易进入的URL这里我选择的就是D：根目录下创建一个blog文件夹，若后续出现了问题，最简单的方法就是把blog文件夹删除，从这一步重新开始创建。</p><p>首先要移动到目标路径下，我是D：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:</span><br><span class="line">mkdir blog</span><br></pre></td></tr></table></figure><p>此时可以打开目录查看一下文件夹是否创建成功</p></li><li><p><strong>第六步：初始化blog</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>注意：此处win系统必须装Git，若此处安装Git安装结束后要重启cmd</p><p>另外实现这个命令必须在空文件夹下，即你刚刚创建的blog下</p><p>这一步根据网速来看，可能会很快，也可能很慢</p></li><li><p><strong>第七步：试启动</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>启动本地<a href="localhost:4000">localhost:4000</a>端口，查看默认主题样式</p></li><li><p><strong>第八步：创建日志</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;日志名任意&quot;</span><br></pre></td></tr></table></figure><p>然后你就可以用各种文档编译器在../source/_posts/xxx.md文件</p><p>当然也可以手动创建，不过都要创建在这个文件夹内</p></li><li><p><strong>第九步：运行查看编写的日志</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean   &#x2F;&#x2F;清理缓存</span><br><span class="line">hexo g&#x2F;&#x2F;部署刚刚编辑的文件</span><br><span class="line">hexo s&#x2F;&#x2F;启动</span><br></pre></td></tr></table></figure><p>此时可以看到日志里面出现了你刚刚所编写的一篇文章</p></li><li><p><strong>第十步：部署服务器上</strong></p><p>只是在自己电脑上看，肯定没有什么意思，GitHub给我提供一个免费的300M的云存储，我们可以通过上传我们的blog文件夹来达成建立一个博客网站的目的</p><p>首先，你需要登录到<a href="https://github.com/" target="_blank" rel="noopener">Github</a>的官方网站，注册一个Github账号，然后选择Create a new repository </p><p>此时，第一行Repository name一定要起自己注册账号的   名字.github.io</p><p>下面的描述等其他选项可以任意，记得选项中选择public可以让别人访问，最后点击创建即可</p></li><li><p><strong>第十一步：安装Git插件</strong></p><p>有人问，不是刚刚安装了Git了么，怎么还安装插件，这个是上传文件到github的插件需要单独下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p>然后会有一长串提示可以看到安装成功</p></li><li><p><strong>第十二步：配置_config.yml文件</strong></p><p>任意编辑器打开，翻到最后一页</p><p>部署三个属性值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type: git</span><br><span class="line">repo: 此处填写自己创建数据库的地址</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><p>注意每个冒号后面都有空格，这点很重要，到后面选择自己喜欢的主题并修改的时候也要用到</p></li><li><p><strong>第十三步：传入远端Github</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>第一次传输会让你输入你的GitHub账号密码，输入完就会提示传输成功了</p><p>刷新你的GitHub仓库就会发现有很多新的文件，和你blog文件夹的文件一样</p><p>此时就可以复制仓库名字进行访问了！！！</p><hr></li><li><h2 id="注：更换主题！！"><a href="#注：更换主题！！" class="headerlink" title="注：更换主题！！"></a>注：更换主题！！</h2><ul><li><p>当你开始建立博客以后，就会发现，GitHub上有各式各样的主题，这时候就要学会如何下载他人的主题了</p></li><li><p>第一步</p></li><li><pre><code>git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">此处以一个很火的yilia主题作为例子，下载主题到blog文件夹里面的themes里</span><br><span class="line"></span><br><span class="line">然后要修改主目录下的_config.yml---&gt;中的themes: yilia（注意空格）</span><br><span class="line"></span><br><span class="line">然后就是老三步：</span><br></pre></td></tr></table></figure>hexo cleanhexo ghexo s    //预览一下看看有没有错误hexo d    //上传</code></pre><p>之后你就可以愉快的玩耍啦~~</p></li></ul><hr><p>如果觉得不错呢，记得给兄弟姐妹们分享哟~~谢谢大家了！</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么要写博客&quot;&gt;&lt;a href=&quot;#为什么要写博客&quot; class=&quot;headerlink&quot; title=&quot;为什么要写博客&quot;&gt;&lt;/a&gt;为什么要写博客&lt;/h2&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;为了改变什么&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="网站" scheme="https://zhouxyly.github.io/categories/%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="hexo" scheme="https://zhouxyly.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Win10_Mysql安装过程</title>
    <link href="https://zhouxyly.github.io/2020/03/23/Mysql%E8%AF%A6%E7%BB%86%E8%A3%85%E5%A4%87/"/>
    <id>https://zhouxyly.github.io/2020/03/23/Mysql%E8%AF%A6%E7%BB%86%E8%A3%85%E5%A4%87/</id>
    <published>2020-03-23T08:21:07.000Z</published>
    <updated>2020-04-18T09:29:54.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-软件下载："><a href="#1-软件下载：" class="headerlink" title="1.软件下载："></a>1.软件下载：</h1><hr><p><del>安装版本的MySQL方法</del></p><p>这个是数据库下载页面</p><blockquote><p><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">点击这里下载数据库！！！</a></p></blockquote><a id="more"></a><hr><p>我解压的位置是： D:\Mysql\mysql-8.0.19-winx64<br><img src="/2020/03/23/Mysql%E8%AF%A6%E7%BB%86%E8%A3%85%E5%A4%87/1.png" alt="下载数据库"><br><img src="/2020/03/23/Mysql%E8%AF%A6%E7%BB%86%E8%A3%85%E5%A4%87/2.png" alt="选择"><br>D盘创建Mysql文件夹 将解压好的mysql-8.0.19-winx64放在Mysql里面，点开mysql-8.0.19-winx64有bin文件夹等。参考下图，创建my.ini配置文件<br><img src="/2020/03/23/Mysql%E8%AF%A6%E7%BB%86%E8%A3%85%E5%A4%87/3.png" alt="创建文件"></p><blockquote><p><strong>注意此处若修改ini后缀没有反应，打开仍是txt，说明后缀名没有显示</strong><br><em>我下载在D盘了，要是下载其他盘的话需要改环境MYSQL_HOME的路径，还有两个配置文件里面的路径，为了避免失误最好仔细检查路径是否错误</em></p></blockquote><hr><h4 id="创建my-ini配置文件"><a href="#创建my-ini配置文件" class="headerlink" title="创建my.ini配置文件"></a>创建my.ini配置文件</h4><p><strong>my.ini写入以下代码文字：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[mysqld] </span><br><span class="line"># 设置 3306 端口 </span><br><span class="line">port&#x3D;3306 </span><br><span class="line"># 设置 mysql 的安装目录 </span><br><span class="line">basedir&#x3D;D:\Mysql\mysql-8.0.19-winx64 </span><br><span class="line"># 设置 mysql 数据库的数据的存放目录</span><br><span class="line">datadir&#x3D;D:\Mysql\mysql-8.0.19-winx64\data </span><br><span class="line"># 允许最大连接数 </span><br><span class="line">max_connections&#x3D;200 </span><br><span class="line"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统 </span><br><span class="line">max_connect_errors&#x3D;10 </span><br><span class="line"># 服务端使用的字符集默认为 UTF8 </span><br><span class="line">character-set-server&#x3D;utf8 </span><br><span class="line"># 创建新表时将使用的默认存储引擎 </span><br><span class="line">default-storage-engine&#x3D;INNODB </span><br><span class="line"># 默认使用“mysql_native_password”插件认证 </span><br><span class="line">default_authentication_plugin&#x3D;mysql_native_password </span><br><span class="line">[mysql] </span><br><span class="line"># 设置 mysql 客户端默认字符集 </span><br><span class="line">default-character-set&#x3D;utf8 </span><br><span class="line">[client] </span><br><span class="line"># 设置 mysql 客户端连接服务端时默认使用的端口 </span><br><span class="line">port&#x3D;3306 </span><br><span class="line">default-character-set&#x3D;utf8</span><br></pre></td></tr></table></figure><blockquote><h3 id="注意注意注意！！！！"><a href="#注意注意注意！！！！" class="headerlink" title="注意注意注意！！！！"></a><lable style="color:red">注意注意注意！！！！</lable></h3><blockquote><p><lable style="color:red">此处的data文件绝对不要手动创建，后面命令可以创建data文件夹</lable></p></blockquote></blockquote><hr><h1 id="2-配置环境："><a href="#2-配置环境：" class="headerlink" title="2.配置环境："></a>2.配置环境：</h1><p><strong>工具栏搜索：高级系统设置，或者鼠标右键我的电脑&gt;属性&gt;高级系统设置打开 。</strong><br><img src="/2020/03/23/Mysql%E8%AF%A6%E7%BB%86%E8%A3%85%E5%A4%87/4.png" alt="环境变量"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">点击：环境变量（ps：注意是系统变量不是上面的用户变量）</span><br><span class="line">新建变量名：MYSQL_HOME   变量值：E:\Mysql\mysql-8.0.19-winx64 点击确</span><br></pre></td></tr></table></figure><p><img src="/2020/03/23/Mysql%E8%AF%A6%E7%BB%86%E8%A3%85%E5%A4%87/5.png" alt="Path"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">系统变量找到：Path 点击编辑</span><br><span class="line">新建变量：%MYSQL_HOME%\bin 点击确定</span><br></pre></td></tr></table></figure><hr><h1 id="3-用管理员身份打开命令窗口初始化MySQL"><a href="#3-用管理员身份打开命令窗口初始化MySQL" class="headerlink" title="3.用管理员身份打开命令窗口初始化MySQL"></a>3.用管理员身份打开命令窗口初始化MySQL</h1><p>创建data文件夹：（不要手动创建data文件夹，否则可能后面启动mysql服务启动不了！启动不了清删除data文件夹，重新执行以下代码。执行后出现data文件夹 ps：每执行一段代码都要点击回车键）</p><blockquote><p>mysqld –initialize-insecure</p></blockquote><p>初始化语句：（对照图c-命令窗口一条一条实行，执行后打开data文件夹出现初始化文夹）</p><blockquote><p>mysqld –defaults-file=D:\Mysql\mysql-8.0.19-winx64\my.ini –initialize –console</p></blockquote><p>安装MySQL：</p><blockquote><p>mysqld install</p></blockquote><p>进行MySQL初始化，执行后创建root用户：</p><blockquote><p>mysqld –initialize-insecure –user=mysql</p></blockquote><p>启动MySQL服务：（显示启动成功为正确）</p><blockquote><p>net start mysql</p></blockquote><p>启动后你的root用户密码为空，设置密码的为123456：（密码改不改自己随意）</p><blockquote><p>mysqladmin -u root -p password 123456<br>回车出现 “Enter password” 不用输入直接点击回车下一步</p></blockquote><p>登录用户：</p><blockquote><p>mysql -u root -p<br>（回车后，输入密码即可 ，之前设置的密码为123456）</p></blockquote><p><img src="/2020/03/23/Mysql%E8%AF%A6%E7%BB%86%E8%A3%85%E5%A4%87/7.jpg" alt="cmd"></p><h2 id="成功登陆！安装完成"><a href="#成功登陆！安装完成" class="headerlink" title="成功登陆！安装完成"></a><lable style="color:red">成功登陆！安装完成</lable></h2><p>失败请参考附3安装失败可能导致的原因</p><hr><h1 id="4-下载第三方客户端工具："><a href="#4-下载第三方客户端工具：" class="headerlink" title="4.下载第三方客户端工具："></a>4.下载第三方客户端工具：</h1><p>因为MySQL是一个基于客户机——服务器的DBMS，使用MySQl需要有一个客户机软件给MySQL提供要执行的命令的脚本工具。</p><p>脚本工具有 ：Navicat for MySQL 、MySQL Workbench、SQLyog等一系列工具详情参考以下链接：<a href="https://blog.csdn.net/z59d8m6e40/article/details/72630810" target="_blank" rel="noopener">第三方工具</a><br><img src="/2020/03/23/Mysql%E8%AF%A6%E7%BB%86%E8%A3%85%E5%A4%87/6.png" alt><br>安装后打开软件 我这里用的是SQLyog：新建&gt;输入密码为123456&gt;连接，其他的软件也是类似的方式。</p><hr><h1 id="附3-安装失败可能的原因："><a href="#附3-安装失败可能的原因：" class="headerlink" title="附3.安装失败可能的原因："></a>附3.安装失败可能的原因：</h1><blockquote><p>一：重装MySQL但是没有卸载干净</p></blockquote><p><strong>方式一:</strong><br>打开命令窗口，输入 net stop mysql 关闭MySQL服务 ，然后删除MySQL的服务输入sc delete MySQL</p><p><strong>方式二:</strong><br>打开任务管理器找到有关MySQL服务关闭，然后删除或卸载所有有关Mysql文件。</p><blockquote><p>二：执行第二条初始化语句后出现乱码</p></blockquote><p>安装目录中，文件夹避免出现中文字符，请使用英文命名文件夹。</p><blockquote><p>三：MySQL服务启动不了</p></blockquote><p>上面也说了，可能是你手动创建了data文件夹，删除data文件夹，然后重新执行上面所有的命令。</p><p>其他问题：</p><p>各种问题我就不一一列举了其他问题，大家在CSDN平台上查找答案，下为链接</p><blockquote><p><a href="https://www.csdn.net/" target="_blank" rel="noopener">csdn</a></p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-软件下载：&quot;&gt;&lt;a href=&quot;#1-软件下载：&quot; class=&quot;headerlink&quot; title=&quot;1.软件下载：&quot;&gt;&lt;/a&gt;1.软件下载：&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;del&gt;安装版本的MySQL方法&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;这个是数据库下载页面&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/downloads/mysql/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击这里下载数据库！！！&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://zhouxyly.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Mysql" scheme="https://zhouxyly.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zhouxyly.github.io/2020/03/23/hello-world/"/>
    <id>https://zhouxyly.github.io/2020/03/23/hello-world/</id>
    <published>2020-03-23T08:09:30.907Z</published>
    <updated>2020-03-29T14:30:54.552Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="网站" scheme="https://zhouxyly.github.io/categories/%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="hexo" scheme="https://zhouxyly.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
